/***************************************************************************************************/
/*                                                                                                 */
/* file:          tile.h                                                                           */
/*                                                                                                 */
/* source:        2018-2020, written by Adrian Kundert (adrian.kundert@gmail.com)                  */
/*                                                                                                 */
/* description:   Basic tiles and sound for the APL                                                */
/*                                                                                                 */
/* This library is free software; you can redistribute it and/or modify it under the terms of the  */
/* GNU Lesser General Public License as published by the Free Software Foundation;                 */
/* either version 2.1 of the License, or (at your option) any later version.                       */
/*                                                                                                 */
/* This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;       */
/* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.       */
/* See the GNU Lesser General Public License for more details.                                     */
/*                                                                                                 */
/***************************************************************************************************/

#ifndef tile_h
#define tile_h

#define tile_empty 							0
#define tile_paddle_left				1
#define tile_paddle_right				2			
#define tile_net								3			
#define tile_top_left_corner		4
#define tile_top_border					5
#define tile_top_right_corner		6
#define tile_right_border				7
#define tile_right_bottom_corner 8
#define tile_bottom_border			9
#define tile_bottom_left_corner 10
#define tile_left_border				11

#ifdef PIXEL_HW_MUX
const byte Tile[] __attribute__ ((aligned (0x400))) PROGMEM = {
  // tile 0 (empty)
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  // tile 1 (green paddle left)
  0b00001000,0b00000000,0b00000000,0b00000000,
  0b00001000,0b00000000,0b00000000,0b00000000,
  0b00001000,0b00000000,0b00000000,0b00000000,
  0b00001000,0b00000000,0b00000000,0b00000000,
  0b00001000,0b00000000,0b00000000,0b00000000,
  0b00001000,0b00000000,0b00000000,0b00000000,
  0b00001000,0b00000000,0b00000000,0b00000000,
  0b00001000,0b00000000,0b00000000,0b00000000,
  // tile 2 (cyan paddle right)
  0b00000000,0b00000000,0b01100000,0b00000000,
  0b00000000,0b00000000,0b01100000,0b00000000,
  0b00000000,0b00000000,0b01100000,0b00000000,
  0b00000000,0b00000000,0b01100000,0b00000000,
  0b00000000,0b00000000,0b01100000,0b00000000,
  0b00000000,0b00000000,0b01100000,0b00000000,
  0b00000000,0b00000000,0b01100000,0b00000000,
  0b00000000,0b00000000,0b01100000,0b00000000,
	// tile 3 (blue net)
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00100000,0b00000000,0b00000000,0b00000000,
  0b00100000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  // tile 4 (top left corner)
  0b10010000,0b10010000,0b10010000,0b10010000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  // tile 5 (top border)
  0b10010000,0b10010000,0b10010000,0b10010000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  // tile 6 (top right corner)
  0b10010000,0b10010000,0b10010000,0b10010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  // tile 7 (right border)
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  // tile 8 (right bottom corner)
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b00000000,0b00000000,0b00000000,0b00010000,
  0b10010000,0b10010000,0b10010000,0b10010000,
  // tile 9 (bottom border)
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b00000000,0b00000000,0b00000000,0b00000000,
  0b10010000,0b10010000,0b10010000,0b10010000,
  // tile 10 (bottom left corner)
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10010000,0b10010000,0b10010000,0b10010000,
  // tile 11 (left border)
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000,
  0b10000000,0b00000000,0b00000000,0b00000000
};  //  end of tile
#else
// mono RED tile definition (no bit position shift)
const byte Tile[] __attribute__ ((aligned (0x400))) PROGMEM = {
  // tile 0 (empty)
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  // tile 1 (paddle left)
  0b01000000,
  0b01000000,
  0b01000000,
  0b01000000,
  0b01000000,
  0b01000000,
  0b01000000,
  0b01000000,
  // tile 2 (paddle right)
  0b00000010,
  0b00000010,
  0b00000010,
  0b00000010,
  0b00000010,
  0b00000010,
  0b00000010,
  0b00000010,
  // tile 3 (net)
  0b00000000,
  0b00000000,
  0b00000000,
  0b10000000,
  0b10000000,
  0b00000000,
  0b00000000,
  0b00000000,
  // tile 4 (top left corner)
  0b11111111,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  // tile 5 (top border)
  0b11111111,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  // tile 6 (top right corner)
  0b11111111,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  // tile 7 (right border)
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  // tile 8 (right bottom corner)
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b00000001,
  0b11111111,
  // tile 9 (bottom border)
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b11111111,
  // tile 10 (bottom left corner)
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b11111111,
  // tile 11 (left border)
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000,
  0b10000000
};  //  end of tile
#endif

const byte sound_intro[] PROGMEM = {
10	, scaling(	77	),
5	, scaling(	155	),
5	, scaling(	0	),
5	, scaling(	116	),
5	, scaling(	0	),
5	, scaling(	77	),
5	, scaling(	0	),
5	, scaling(	155	),
5	, scaling(	116	),
10	, scaling(	0	),
10	, scaling(	77	),
10	, scaling(	0	),
10	, scaling(	82	),
5	, scaling(	167	),
5	, scaling(	0	),
5	, scaling(	125	),
5	, scaling(	0	),
5	, scaling(	82	),
5	, scaling(	0	),
5	, scaling(	167	),
5	, scaling(	125	),
10	, scaling(	0	),
10	, scaling(	82	),
10	, scaling(	0	),
10	, scaling(	77	),
5	, scaling(	155	),
5	, scaling(	0	),
5	, scaling(	116	),
5	, scaling(	0	),
5	, scaling(	77	),
5	, scaling(	0	),
5	, scaling(	155	),
5	, scaling(	116	),
10	, scaling(	0	),
10	, scaling(	77	),
10	, scaling(	0	),
5	, scaling(	77	),
5	, scaling(	82	),
5	, scaling(	87	),
5	, scaling(	0	),
5	, scaling(	92	),
5	, scaling(	98	),
5	, scaling(	103	),
5	, scaling(	0	),
5	, scaling(	109	),
5	, scaling(	116	),
5	, scaling(	125	),
5	, scaling(	0	),
10	, scaling(	155	),
0			
};

// Wall sound: duration 16.6 ms, frequency 226 Hz.
const byte sound_wall[] PROGMEM = {
  16/17+1, scaling(68),
  0 
};

// Paddle sound: duration 96 ms, frequency 459 Hz.
const byte sound_paddle[] PROGMEM = {
  96/17+1, scaling(33),
  0 
};

// Point sound: duration 257 msec, frequency 490 Hz. 
const byte sound_point[] PROGMEM = {
  257/17+1, scaling(31),
  0 
};

#endif
