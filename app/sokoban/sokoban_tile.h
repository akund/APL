/***************************************************************************************************/
/*                                                                                                 */
/* file:          sokoban_tile.h                                                                   */
/*                                                                                                 */
/* source:        2018-2021, written by Adrian Kundert (adrian.kundert@gmail.com)                  */
/*                                                                                                 */
/* description:   Tiles for the Sokoban game													   */
/*                                                                                                 */
/* This library is free software; you can redistribute it and/or modify it under the terms of the  */
/* GNU Lesser General Public License as published by the Free Software Foundation;                 */
/* either version 2.1 of the License, or (at your option) any later version.                       */
/*                                                                                                 */
/* This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;       */
/* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.       */
/* See the GNU Lesser General Public License for more details.                                     */
/*                                                                                                 */
/***************************************************************************************************/

#ifndef sokoban_tile_h
#define sokoban_tile_h

#ifdef PIXEL_HW_MUX	
	#define SCREEN_SIZE_COL		21

	// map (width 21, height 20) populated with tile indexes
	const uint8_t SOKOmap_L1[] PROGMEM = {
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x3, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x3, 0x0, 0x3, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0,
	0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x2, 0x2, 0x1, 0x0,
	0x0, 0x1, 0x0, 0x3, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x1, 0x0,
	0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x0, 0x0, 0x2, 0x2, 0x1, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};  //  end of map
#else
	#define SCREEN_SIZE_COL		19

	// map (width 19, height 20) populated with tile indexes
	const uint8_t SOKOmap_L1[] PROGMEM = {
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x3, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x1, 0x0, 0x0, 0x3, 0x0, 0x3, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
		0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x2, 0x2, 0x1,
		0x1, 0x0, 0x3, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x1,
		0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x0, 0x0, 0x2, 0x2, 0x1,
		0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
		0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	};  //  end of map
#endif

#define SCREEN_SIZE_ROW		20
#define MAP_SIZE			SCREEN_SIZE_ROW * SCREEN_SIZE_COL

// tile indexes
#define iEMPTY					0
#define iWALL					1
#define iSTORAGE				2
#define iBOX					3
#define iSTORED_BOX				4

// right direction
#define iMAN_STANDING			5
#define iPUSHING1				6
#define iPUSHING2_MAN_ONLY		7
#define iPUSHING2_MAN_BOX		8
#define iPUSHING2_HALF_BOX		9
// down direction
#define iMAN_STANDING_D			10
#define iPUSHING1_D				11
#define iPUSHING2_MAN_ONLY_D	12
#define iPUSHING2_MAN_BOX_D		13
#define iPUSHING2_HALF_BOX_D	14
// left direction
#define iMAN_STANDING_L			15
#define iPUSHING1_L				16
#define iPUSHING2_MAN_ONLY_L	17
#define iPUSHING2_MAN_BOX_L		18
#define iPUSHING2_HALF_BOX_L	19
// up direction
#define iMAN_STANDING_U			20
#define iPUSHING1_U				21
#define iPUSHING2_MAN_ONLY_U	22
#define iPUSHING2_MAN_BOX_U		23
#define iPUSHING2_HALF_BOX_U	24


const uint8_t SOKOtile[] PROGMEM = {
	// 0 EMPTY
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,

	// 1 WALL,
	0x14, 0xB4, 0x14, 0xB4,
	0x14, 0xB4, 0x14, 0xB4,
	0x0, 0x0, 0x0, 0x0,
	0xB4, 0xA0, 0xB4, 0xA0,
	0xB4, 0xA0, 0xB4, 0xA0,
	0x0, 0x0, 0x0, 0x0,
	0x14, 0xB4, 0x14, 0xB4,
	0x14, 0xB4, 0x14, 0xB4,

	// 2 STORAGE
	0x6C, 0x60, 0xC, 0x6C,
	0x6C, 0xC, 0x60, 0x6C,
	0x60, 0x6C, 0x6C, 0xC,
	0xC, 0x6C, 0x6C, 0x60,
	0xC, 0x6C, 0x6C, 0x60,
	0x60, 0x6C, 0x6C, 0xC,
	0x6C, 0xC, 0x60, 0x6C,
	0x6C, 0x60, 0xC, 0x6C,

	// 3 BOX
	0x0, 0x0, 0x0, 0x0,
	0x18, 0xD8, 0xD8, 0xC0,
	0x18, 0xD8, 0xD8, 0xC0,
	0x18, 0xD8, 0xD8, 0xC0,
	0x18, 0xD8, 0xD8, 0xC0,
	0x18, 0xD8, 0xD8, 0xC0,
	0x18, 0xD8, 0xD8, 0xC0,
	0x0, 0x0, 0x0, 0x0,

	// 4 STORED_BOX
	0xFC, 0xFC, 0xFC, 0xFC,
	0xF8, 0xD8, 0xD8, 0xDC,
	0xF8, 0xD8, 0xD8, 0xDC,
	0xF8, 0xD8, 0xD8, 0xDC,
	0xF8, 0xD8, 0xD8, 0xDC,
	0xF8, 0xD8, 0xD8, 0xDC,
	0xF8, 0xD8, 0xD8, 0xDC,
	0xFC, 0xFC, 0xFC, 0xFC,
//-----------
	// 5 MAN_STANDING_RIGHT
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0xCC, 0x6C,
	0x6C, 0x74, 0xAC, 0x6C,
	0x6C, 0x70, 0x8C, 0x6C,
	0x6C, 0x70, 0x90, 0x6C,
	0x6C, 0x70, 0x8C, 0x6C,
	0x6C, 0x74, 0xAC, 0x6C,
	0x6C, 0x6C, 0xCC, 0x6C,

	// 6 PUSHING1_RIGHT
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x74, 0xB8,
	0x6C, 0x6C, 0x74, 0x6C,
	0x6C, 0x60, 0xB0, 0x8C,
	0x6C, 0x6C, 0xB0, 0x90,
	0x6C, 0x6C, 0xB0, 0x80,
	0x6C, 0x6C, 0x74, 0x6C,
	0x6C, 0x6C, 0x74, 0xB8,

	// 7 PUSHING2_MAN_ONLY_RIGHT
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0xB4, 0xCC, 0x6C,
	0x6C, 0xAC, 0x6C, 0x6C,
	0x74, 0x90, 0x0C, 0x6C,
	0x74, 0x90, 0x8C, 0x6C,
	0x14, 0x90, 0x6C, 0x6C,
	0x6C, 0xAC, 0x6C, 0x6C,
	0x6C, 0xB4, 0xCC, 0x6C,

	// 8 PUSHING2_MAN_BOX_RIGHT
	0x6C, 0x6C, 0x60, 0x0, 	// pushing half box
	0x6C, 0xB4, 0xC0, 0xD8,
	0x6C, 0xAC, 0x60, 0xD8,
	0x74, 0x90, 0x00, 0xD8,
	0x74, 0x90, 0x80, 0xD8,
	0x14, 0x90, 0x60, 0xD8,
	0x6C, 0xAC, 0x60, 0xD8,
	0x6C, 0xB4, 0xC0, 0x0,

	// 9 PUSHING2_HALF_BOX_RIGHT
	0x00, 0x00, 0xC, 0x6C,	// next tile second half box
	0xD8, 0xD8, 0xC, 0x6C,
	0xD8, 0xD8, 0xC, 0x6C,
	0xD8, 0xD8, 0xC, 0x6C,
	0xD8, 0xD8, 0xC, 0x6C,
	0xD8, 0xD8, 0xC, 0x6C,
	0xD8, 0xD8, 0xC, 0x6C,
	0x00, 0x00, 0xC, 0x6C,
//------------			
	// 10 MAN_STANDING_Down
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0xB0, 0x90, 0xAC,
	0x78, 0xB0, 0x90, 0xB8,
	0x6C, 0x6C, 0x8C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,

	// 11 PUSHING1_Down
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x60, 0x6C, 0x6C,
    0x6C, 0x74, 0xB4, 0x6C,
    0x74, 0xB0, 0x90, 0xB4,
    0x74, 0x70, 0x90, 0x74,
    0x78, 0x6C, 0x80, 0x78,

	// 12 PUSHING2_MAN_ONLY_Down
    0x6C, 0x6C, 0x60, 0x6C,
    0x6C, 0x74, 0xB4, 0x6C,
    0x74, 0xB0, 0x90, 0xB4,
    0x74, 0x70, 0x90, 0x74,
    0x78, 0x60, 0x8C, 0x78,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
	
	// 13 PUSHING2_MAN_BOX_Down
    0x6C, 0x6C, 0x60, 0x6C,
    0x6C, 0x74, 0xB4, 0x6C,
    0x74, 0xB0, 0x90, 0xB4,
    0x74, 0x70, 0x90, 0x74,
    0x78, 0x60, 0x8C, 0x78,
    0x00, 0x00, 0x00, 0x00,
    0x18, 0xD8, 0xD8, 0xC0,
    0x18, 0xD8, 0xD8, 0xC0,
	
	// 14 PUSHING2_HALF_BOX_Down
    0x18, 0xD8, 0xD8, 0xC0,
    0x18, 0xD8, 0xD8, 0xC0,
    0x18, 0xD8, 0xD8, 0xC0,
    0x18, 0xD8, 0xD8, 0xC0,
    0x00, 0x00, 0x00, 0x00,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
	
// left direction
	// iMAN_STANDING_L
	0x6C, 0x78, 0x6C, 0x6C,
	0x6C, 0x74, 0xAC, 0x6C,
	0x6C, 0x70, 0x8C, 0x6C,
	0x6C, 0x90, 0x8C, 0x6C,
	0x6C, 0x70, 0x8C, 0x6C,
	0x6C, 0x74, 0xAC, 0x6C,
	0x6C, 0x78, 0x6C, 0x6C,
	0x6C, 0x6C, 0x6C, 0x6C,
	
	// iPUSHING1_L
    0xD4, 0xAC, 0x6C, 0x6C,
    0x6C, 0xAC, 0x6C, 0x6C,
    0x10, 0x94, 0x6C, 0x6C,
    0x90, 0x94, 0x6C, 0x6C,
    0x70, 0x94, 0x0C, 0x6C,
    0x6C, 0xAC, 0x6C, 0x6C,
    0xD4, 0xAC, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
	
	// iPUSHING2_MAN_ONLY_L
    0x6C, 0x78, 0xB4, 0x6C,
    0x6C, 0x6C, 0x74, 0x6C,
    0x6C, 0x6C, 0x90, 0xA0,
    0x6C, 0x70, 0x90, 0xAC,
    0x6C, 0x60, 0x90, 0xAC,
    0x6C, 0x6C, 0x74, 0x6C,
    0x6C, 0x78, 0xB4, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,

	// iPUSHING2_MAN_BOX_L
    0x00, 0x18, 0xB4, 0x6C,
    0xD8, 0x0C, 0x74, 0x6C,
    0xD8, 0x0C, 0x90, 0xA0,
    0xD8, 0x10, 0x90, 0xAC,
    0xD8, 0x00, 0x90, 0xAC,
    0xD8, 0x0C, 0x74, 0x6C,
    0xD8, 0x18, 0xB4, 0x6C,
    0x00, 0x0C, 0x6C, 0x6C,

	// iPUSHING2_HALF_BOX_L
    0x6C, 0x60, 0x00, 0x00,
    0x6C, 0x60, 0xD8, 0xD8,
    0x6C, 0x60, 0xD8, 0xD8,
    0x6C, 0x60, 0xD8, 0xD8,
    0x6C, 0x60, 0xD8, 0xD8,
    0x6C, 0x60, 0xD8, 0xD8,
    0x6C, 0x60, 0xD8, 0xD8,
    0x6C, 0x60, 0x00, 0x00,

// up direction
	// iMAN_STANDING_U
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x70, 0x6C, 0x6C,
    0xD4, 0x90, 0x94, 0xCC,
    0x74, 0x90, 0x94, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,

	// iPUSHING1_U
    0xCC, 0x10, 0x6C, 0xCC,
    0xAC, 0x90, 0x8C, 0xAC,
    0xB4, 0x90, 0x94, 0xAC,
    0x6C, 0xB4, 0xAC, 0x6C,
    0x6C, 0x6C, 0x0C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,

	// iPUSHING2_MAN_ONLY_U
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0xCC, 0x70, 0x0C, 0xCC,
    0xAC, 0x90, 0x8C, 0xAC,
    0xB4, 0x90, 0x94, 0xAC,
    0x6C, 0xB4, 0xAC, 0x6C,
    0x6C, 0x0C, 0x6C, 0x6C,

	// iPUSHING2_MAN_BOX_U
    0x18, 0xD8, 0xD8, 0xC0,
    0x18, 0xD8, 0xD8, 0xC0,
    0x00, 0x00, 0x00, 0x00,
    0xCC, 0x70, 0xC, 0xCC,
    0xAC, 0x90, 0x8C, 0xAC,
    0xB4, 0x90, 0x94, 0xAC,
    0x6C, 0xB4, 0xAC, 0x6C,
    0x6C, 0xC, 0x6C, 0x6C,

	// iPUSHING2_HALF_BOX_U
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x6C, 0x6C, 0x6C, 0x6C,
    0x0, 0x0, 0x0, 0x0,
    0x18, 0xD8, 0xD8, 0xC0,
    0x18, 0xD8, 0xD8, 0xC0,
    0x18, 0xD8, 0xD8, 0xC0,
    0x18, 0xD8, 0xD8, 0xC0
};  //  end of tile



#endif
