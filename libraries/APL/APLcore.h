/***************************************************************************************************/
/*                                                                                                 */
/* file:          APLcore.h                                                                        */
/*                                                                                                 */
/* source:        2018-2020, written by Adrian Kundert (adrian.kundert@gmail.com)                  */
/*                                                                                                 */
/* description:   APL interrupt driven engine for VGA, Audio, UART and PS2 peripherals             */
/*                                                                                                 */
/* This library is free software; you can redistribute it and/or modify it under the terms of the  */
/* GNU Lesser General Public License as published by the Free Software Foundation;                 */
/* either version 2.1 of the License, or (at your option) any later version.                       */
/*                                                                                                 */
/* This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;       */
/* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.       */
/* See the GNU Lesser General Public License for more details.                                     */
/*                                                                                                 */
/***************************************************************************************************/

#ifndef APLcore_h
#define APLcore_h

#include "Arduino.h"
#include "ps2keyboard.h"
#include "APLringBuffer.h"

// APL software version
const byte SW_version_mj = 0;
const byte SW_version_mn = 1;

//================================ Hardware Config (begin) ========================================//
#define F_CPU 16000000UL  // system clock
#define PIXEL_HW_MUX      // enable this define when Pixel Hardware Mux is used

#define USART_BAUDRATE 9600 //baud rate for the APL UART

#ifdef PIXEL_HW_MUX
	#if F_CPU == 32000000UL
		const byte scrViewWidthInTileTEXT = 42; // ok
		const byte scrViewWidthInTileGRAPH = 31; // ok
	#elif F_CPU == 24000000UL
		const byte scrViewWidthInTileTEXT = 29; // ok
		const byte scrViewWidthInTileGRAPH = 21; // ok
	#elif F_CPU == 20000000UL
		const byte scrViewWidthInTileTEXT = ??;
		const byte scrViewWidthInTileGRAPH = ??;
	#else 	// Arduino default 16 MHz
		const byte scrViewWidthInTileTEXT = 15; // ok
		const byte scrViewWidthInTileGRAPH = 11; // ok
	#endif
#else
	#if F_CPU == 32000000UL
		const byte scrViewWidthInTileTEXT = 31; // ok
		const byte scrViewWidthInTileGRAPH = 21; // ok
	#elif F_CPU == 24000000UL
		const byte scrViewWidthInTileTEXT = 22; // ok
		const byte scrViewWidthInTileGRAPH = 16; //ok 128 px width by 160 px height
	#elif F_CPU == 20000000UL
		const byte scrViewWidthInTileTEXT = ??;
		const byte scrViewWidthInTileGRAPH = ??;
	#else 	// Arduino default 16 MHz
		const byte scrViewWidthInTileTEXT = 11; // ok
		const byte scrViewWidthInTileGRAPH = 8; // ok
	#endif
#endif
//================================ Hardware Config (end) ==========================================//

// APL core engine constants
const byte scrViewHeightInTile = 20;
const byte verticalScaling = 3;                         // repeating at each n lines
const byte scrBufWidthInTile = scrViewWidthInTileTEXT;  // TEXT mode is larger than GRAPH mode
const byte scrBufHeightInTile = scrViewHeightInTile;    // tiles height. The max is verticalPixels/verticalScaling/TileMemHeight

class APLcore
{
	private:
		APLcore() {}  ///< singleton object no accessible 
	
	public:
		static APLcore* instance() {
				static APLcore INSTANCE;
				return &INSTANCE;
		}
		
		void coreInit();          ///< initializes and activates the core
		bool isLineActive();      ///< returns true when the core sends pixel lines
		void setTextMode();       ///< set the VGA engine to text mode (6x8 character)
		void setGraphMode();      ///< set the VGA engine to graphical mode (8x8 tile)
		byte getscrViewWidthInTile();
		byte getscrViewHeightInTile() {
				return scrViewHeightInTile; 
		}
		byte* getTileXY(byte x, byte y);											///< get the pointer for the Tile at position (x,y)
		void setTileXYdirect(byte x, byte y, byte* TilePtr);  ///< at position (x,y), set the pointer to the Tile (without ISR sync)
		void setTileXY(byte x, byte y, byte* TilePtr);        ///< at position (x,y), set the pointer to the Tile (ISR sync, better to avoid conflict)
		void setTileXYtext(byte x, byte y, char c);	
		void setXScroll(byte scrollValue);
		void setYScroll(byte scrollValue);
		
		bool setSound(char* str);///< set sound to be played
		void offSound();         ///< switch off the sound
		bool isSoundOff();       ///< return true when the sound is off
		
	  bool keyPressed();     ///< returns true if a key was pressed
    char keyRead();        ///< returns the last key pressed
		
		byte UARTavailable_rx();        ///< get the amount of char received (rx buffer)
		byte UARTavailable_tx();        ///< get the amount of char to be sent (tx buffer)
		byte UARTwrite(const __FlashStringHelper*);    ///< write a string from flash to the UART
		byte UARTwrite(char* data);    ///< write a string from flash to the UART
		byte UARTwrite(char data);      ///< write a single char to the UART 
    char UARTread();                ///< read a single char from the UART 
		char UARTpeek();                ///< read a single char from the UART without extracting from the rx buffer

		void ms_delay(unsigned int t); ///< wait function in milliseconds
		unsigned long ms_elpased();     ///< returns the time elpased in milliseconds since the last reset
		unsigned int getSWversion() {
			unsigned int version = SW_version_mj;
			version = (version << 8) + SW_version_mn;
			return version;
		}
};

// monochrome 8 pixels by 8 pixels tile. Aligned to 512 to get the begin address higher the RAM
const byte TileMemWidth = 1;  // 1 byte for 8 pix
const byte TileMemHeight = 8; // TileMemHeight needs to be a pow2.
const byte TileMemSize = TileMemWidth*TileMemHeight;

const byte PGMaddrH PROGMEM = 4; //((unsigned int)&Tile)>>8; // start at 0x400 becase 512 aligned.

// 8 px width by 8 px height per byte, the out sequence is MSB to LSB
const byte coreTile[] __attribute__ ((aligned (512))) PROGMEM = {
  // tile 0 (empty)
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  0b00000000,
  // tile 1 (damier)
  0b10101010,
  0b01010101,
  0b10101010,
  0b01010101,
  0b10101010,
  0b01010101,
  0b10101010,
  0b01010101,
  // tile 2 (square)
  0b11111111,
  0b10000001,
  0b10000001,
  0b10000001,
  0b10000001,
  0b10000001,
  0b10000001,
  0b11111111,
  // tile 3 (full)
  0b11111111,
  0b11111111,
  0b11111111,
  0b11111111,
  0b11111111,
  0b11111111,
  0b11111111,
  0b11111111
};  //  end of APL tiles

// tone format: 
// the odd byte is the tone duration in n*31.746uS, (0: stop, 255: loop). 
// The even byte value is "extclk/1024 /(2*frequency) - 1". @32MHz it's (255 -> 61Hz, 0 -> 15625Hz)
const float scaling = F_CPU / 32000000.0;
const byte sound_mario[] PROGMEM = {
6	,	23	* scaling,
9	,	 0	* scaling,
6	,	23	* scaling,
18,  0	* scaling,
6	,	23	* scaling,
18,  0	* scaling,
6	,	30	* scaling,
6	,	 0	* scaling,
6	,	23	* scaling,
18,  0	* scaling,
6	,	19	* scaling,
33,  0	* scaling,
6	,	40	* scaling,
35,  0	* scaling,
6	,	30	* scaling,
27,  0	* scaling,
6	,	40	* scaling,
24,  0	* scaling,
6	,	48	* scaling,
30,  0	* scaling,
6	,	35	* scaling,
18,  0	* scaling,
5	,	32	* scaling,
20,  0	* scaling,
6	,	34	* scaling,
9	,	 0	* scaling,
6	,	35	* scaling,
18,  0	* scaling,
6	,	40	* scaling,
12,  0	* scaling,
5	,	23	* scaling,
12,  0	* scaling,
3	,	20	* scaling,
9	,	 0	* scaling,
6	,	17	* scaling,
18,  0	* scaling,
5	,	21	* scaling,
9	,	 0	* scaling,
3	,	20	* scaling,
21,  0	* scaling,
5	,	23	* scaling,
18,  0	* scaling,
5	,	29	* scaling,
9	,	 0	* scaling,
5	,	26	* scaling,
9	,	 0	* scaling,
5	,	32	* scaling,
30,  0	* scaling,
6	,	30	* scaling,
27,  0	* scaling,
6	,	40	* scaling,
24,  0	* scaling,
6	,	48	* scaling,
30,  0	* scaling,
6	,	35	* scaling,
18,  0	* scaling,
5	,	32	* scaling,
20,  0	* scaling,
6	,	34	* scaling,
9	,	 0	* scaling,
6	,	35	* scaling,
18,  0	* scaling,
6	,	40	* scaling,
12,  0	* scaling,
5	,	23	* scaling,
12,  0	* scaling,
3	,	20	* scaling,
9	,	 0	* scaling,
6	,	17	* scaling,
18,  0	* scaling,
5	,	21	* scaling,
9	,	 0	* scaling,
3	,	20	* scaling,
21,  0	* scaling,
5	,	23	* scaling,
18,  0	* scaling,
5	,	29	* scaling,
9	,	 0	* scaling,
5	,	26	* scaling,
9	,	 0	* scaling,
5	,	32	* scaling,
30,  0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	20	* scaling,
6	,	 0	* scaling,
6	,	21	* scaling,
9	,	 0	* scaling,
6	,	22	* scaling,
9	,	 0	* scaling,
9	,	24	* scaling,
18,  0	* scaling,
9	,	23	* scaling,
18,  0	* scaling,
6	,	40	* scaling,
9	,	 0	* scaling,
6	,	35	* scaling,
9	,	 0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	35	* scaling,
9	,	 0	* scaling,
6	,	30	* scaling,
6	,	 0	* scaling,
6	,	26	* scaling,
13,  0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	20	* scaling,
6	,	 0	* scaling,
6	,	21	* scaling,
9	,	 0	* scaling,
6	,	22	* scaling,
9	,	 0	* scaling,
9	,	24	* scaling,
18,  0	* scaling,
12,	23	* scaling,
18,  0	* scaling,
5	,	14	* scaling,
18,  0	* scaling,
5	,	14	* scaling,
9	,	0	  * scaling,
5	,	14	* scaling,
18,  0	* scaling,
6	,	40	* scaling,
18, 0 	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	20	* scaling,
6	,	 0  * scaling,
6	,	21	* scaling,
9,    0 * scaling,
6	,	22	* scaling,
9,    0 * scaling,
9	,	24	* scaling,
18,  0	* scaling,
9	,	23	* scaling,
18,  0	* scaling,
6	,	40	* scaling,
9	,	 0	* scaling,
6	,	35	* scaling,
9	,	 0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	35	* scaling,
9	,	 0	* scaling,
6	,	30	* scaling,
6	,	 0	* scaling,
6	,	26	* scaling,
25,  0	* scaling,
6	,	26	* scaling,
27,  0	* scaling,
6	,	27	* scaling,
25,  0	* scaling,
6	,	30	* scaling,
22,  0	* scaling,
6	,	40	* scaling,
18,  0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	30	* scaling,
9	,	 0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	20	* scaling,
6	,	 0	* scaling,
6	,	21	* scaling,
9	,	 0	* scaling,
6	,	22	* scaling,
9	,	 0	* scaling,
9	,	24	* scaling,
18,  0	* scaling,
9	,	23	* scaling,
18,  0	* scaling,
6	,	40	* scaling,
9	,	 0	* scaling,
6	,	35	* scaling,
9	,	 0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	35	* scaling,
9	,	 0	* scaling,
6	,	30	* scaling,
6	,	 0	* scaling,
6	,	26	* scaling,
13,  0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	20	* scaling,
6	,	 0	* scaling,
6	,	21	* scaling,
9,   0  * scaling,
6	,	22	* scaling,
9,   0  * scaling,
9	,	24	* scaling,
18,  0	* scaling,
12,	23  * scaling,
18,  0	* scaling,
5	,	14	* scaling,
18,  0	* scaling,
5	,	14	* scaling,
9,   0  * scaling,
5	,	14	* scaling,
18,  0	* scaling,
6	,	40	* scaling,
18,  0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	20	* scaling,
6,   0  * scaling,
6	,	21	* scaling,
9,   0  * scaling,
6	,	22	* scaling,
9,   0  * scaling,
9	,	24	* scaling,
18,  0	* scaling,
9	,	23	* scaling,
18,  0	* scaling,
6	,	40	* scaling,
9,   0  * scaling,
6	,	35	* scaling,
9,   0  * scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	35	* scaling,
9,   0  * scaling,
6	,	30	* scaling,
6,   0  * scaling,
6	,	26	* scaling,
25,  0	* scaling,
6	,	26	* scaling,
27,  0	* scaling,
6	,	27	* scaling,
25,  0	* scaling,
6	,	30	* scaling,
22,  0	* scaling,
6	,	40	* scaling,
18,  0	* scaling,
6	,	30	* scaling,
18,  0	* scaling,
6	,	30	* scaling,
9 ,  0  * scaling,
6	,	30	* scaling,
18,  0	* scaling,
4	,	30	* scaling,
9 ,  0  * scaling,
5	,	30	* scaling,
18,  0	* scaling,
4	,	30	* scaling,
21,  0	* scaling,
5	,	30	* scaling,
9,   0  * scaling,
5	,	26	* scaling,
21,  0	* scaling,
5	,	23	* scaling,
9 ,  0  * scaling,
5	,	30	* scaling,
18,  0	* scaling,
5	,	35	* scaling,
9 ,  0  * scaling,
5	,	40	* scaling,
36,  0  * scaling,
4	,	30	* scaling,
9,   0  * scaling,
5	,	30	* scaling,
18,  0	* scaling,
4	,	30	* scaling,
21,  0	* scaling,
5	,	30	* scaling,
9 ,  0  * scaling,
5	,	26	* scaling,
9 ,  0  * scaling,
5	,	23	* scaling,
33,  0	* scaling,
5	,	17	* scaling,
20,  0	* scaling,
5	,	20	* scaling,
36,  0  * scaling,
4	,	30	* scaling,
9 ,  0  * scaling,
5	,	30	* scaling,
18,  0	* scaling,
4	,	30	* scaling,
21,  0	* scaling,
5	,	30	* scaling,
9 ,  0  * scaling,
5	,	26	* scaling,
21,  0	* scaling,
5	,	23	* scaling,
9 ,  0  * scaling,
5	,	30	* scaling,
18,  0	* scaling,
5	,	35	* scaling,
9 ,  0  * scaling,
5	,	40	* scaling,
36,  0  * scaling,
6	,	23	* scaling,
9 ,  0  * scaling,
6	,	23	* scaling,
18,  0	* scaling,
6	,	23	* scaling,
18,  0	* scaling,
6	,	30	* scaling,
6 ,  0  * scaling,
6	,	23	* scaling,
18,  0	* scaling,
6	,	19	* scaling,
33,  0	* scaling,
6	,	40	* scaling,
35,  0	* scaling,
0				
};

// Arduino splash image in 20 tiles width by 20 tiles height (first pixel in MSB bit)
const byte TILEimage[] __attribute__ ((aligned (512))) PROGMEM={
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 18
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 1, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 18
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 2, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 18
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 3, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 4, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 4, col 2
	0xff,	0xff,	0xff,	0xff,	0xfe,	0xf8,	0xe0,	0x80, // row 4, col 3
	0xff,	0xff,	0xf0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 4, col 4
	0xff,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 4, col 5
	0xff,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 4, col 6
	0xff,	0xff,	0xf,	0x3,	0x0,	0x0,	0x0,	0x0, // row 4, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0x1f,	0xf,	0x3, // row 4, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 4, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 4, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 4, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 4, col 12
	0xff,	0xff,	0xff,	0xff,	0xfe,	0xf8,	0xe0,	0xc0, // row 4, col 13
	0xff,	0xff,	0xf8,	0xc0,	0x0,	0x0,	0x0,	0x0, // row 4, col 14
	0xff,	0x80,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 4, col 15
	0xff,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 4, col 16
	0xff,	0x7f,	0xf,	0x1,	0x0,	0x0,	0x0,	0x0, // row 4, col 17
	0xff,	0xff,	0xff,	0xff,	0x3f,	0x1f,	0x7,	0x1, // row 4, col 18
	0xff,	0xfe,	0xfe,	0xfe,	0xfe,	0xfe,	0xfe,	0xff, // row 4, col 19
	0xff,	0xc,	0x4,	0x44,	0x40,	0x40,	0x50,	0x52, // row 4, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 5, col 1
	0xff,	0xfe,	0xf8,	0xf0,	0xe0,	0xc0,	0x80,	0x0, // row 5, col 2
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 5, col 3
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 5, col 4
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x7f, // row 5, col 5
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0xf8, // row 5, col 6
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 5, col 7
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 5, col 8
	0xff,	0x7f,	0x3f,	0xf,	0x7,	0x3,	0x1,	0x0, // row 5, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 5, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 5, col 11
	0xff,	0xfc,	0xfc,	0xf0,	0xe0,	0xc0,	0x80,	0x0, // row 5, col 12
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 5, col 13
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 5, col 14
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x3f, // row 5, col 15
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0xfe, // row 5, col 16
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 5, col 17
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 5, col 18
	0xff,	0x3f,	0x1f,	0xf,	0x7,	0x3,	0x1,	0x0, // row 5, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 5, col 20
	0xff,	0xfe,	0xfc,	0xfc,	0xf8,	0xf0,	0xf0,	0xe0, // row 6, col 1
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 6, col 2
	0x0,	0x0,	0x0,	0x0,	0x1,	0x3,	0x7,	0xf, // row 6, col 3
	0x1,	0xf,	0x3f,	0x7f,	0xff,	0xff,	0xff,	0xff, // row 6, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 6, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 6, col 6
	0x80,	0xe0,	0xf8,	0xfe,	0xff,	0xff,	0xff,	0xff, // row 6, col 7
	0x0,	0x0,	0x0,	0x0,	0x0,	0xc0,	0xe0,	0xf0, // row 6, col 8
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 6, col 9
	0x7f,	0x3f,	0x1f,	0xf,	0x7,	0x7,	0x3,	0x1, // row 6, col 10
	0xfe,	0xfc,	0xf8,	0xf0,	0xf0,	0xe0,	0xc0,	0x80, // row 6, col 11
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 6, col 12
	0x0,	0x0,	0x0,	0x0,	0x0,	0x1,	0x7,	0xf, // row 6, col 13
	0x0,	0x7,	0x1f,	0x7f,	0xff,	0xff,	0xff,	0xff, // row 6, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 6, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 6, col 16
	0xc0,	0xf0,	0xfc,	0xff,	0xff,	0xff,	0xff,	0xff, // row 6, col 17
	0x0,	0x0,	0x0,	0x0,	0x80,	0xc0,	0xe0,	0xf0, // row 6, col 18
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 6, col 19
	0xff,	0x7f,	0x3f,	0x3f,	0x1f,	0xf,	0xf,	0x7, // row 6, col 20
	0xe0,	0xc0,	0xc0,	0xc0,	0x80,	0x80,	0x80,	0x80, // row 7, col 1
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x1, // row 7, col 2
	0x1f,	0x3f,	0x3f,	0x7f,	0xff,	0xff,	0xff,	0xff, // row 7, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 7, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 7, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 7, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 7, col 7
	0xf8,	0xfc,	0xfe,	0xff,	0xff,	0xff,	0xff,	0xff, // row 7, col 8
	0x0,	0x0,	0x0,	0x0,	0x80,	0xc0,	0xe0,	0xe0, // row 7, col 9
	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 7, col 10
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 7, col 11
	0x0,	0x0,	0x0,	0x0,	0x1,	0x3,	0x7,	0x7, // row 7, col 12
	0x1f,	0x3f,	0x7f,	0xff,	0xff,	0xff,	0xff,	0xff, // row 7, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 7, col 14
	0xff,	0xff,	0xff,	0xf0,	0xe0,	0xf0,	0xe0,	0xe0, // row 7, col 15
	0xff,	0xff,	0xff,	0x1f,	0x1f,	0x1f,	0xf,	0x1f, // row 7, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 7, col 17
	0xf8,	0xfc,	0xfe,	0xfe,	0xfe,	0xff,	0xff,	0xff, // row 7, col 18
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x80,	0x80, // row 7, col 19
	0x7,	0x3,	0x3,	0x3,	0x1,	0x1,	0x1,	0x1, // row 7, col 20
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 8, col 1
	0x1,	0x1,	0x3,	0x3,	0x3,	0x3,	0x3,	0x7, // row 8, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 8, col 3
	0xff,	0xff,	0xff,	0xf8,	0xf0,	0xf0,	0xf0,	0xf0, // row 8, col 4
	0xff,	0xff,	0xff,	0x0,	0x0,	0x0,	0x0,	0x0, // row 8, col 5
	0xff,	0xff,	0xff,	0x0,	0x0,	0x0,	0x0,	0x0, // row 8, col 6
	0xff,	0xff,	0xff,	0xf,	0x7,	0xf,	0x7,	0xf, // row 8, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 8, col 8
	0xf0,	0xf8,	0xf8,	0xfc,	0xfe,	0xfe,	0xff,	0xff, // row 8, col 9
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 8, col 10
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 8, col 11
	0xf,	0x1f,	0x1f,	0x3f,	0x7f,	0x7f,	0xff,	0xff, // row 8, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 8, col 13
	0xff,	0xff,	0xff,	0xf0,	0xe0,	0xe0,	0xe0,	0xe0, // row 8, col 14
	0xe0,	0xe0,	0xe0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 8, col 15
	0x1f,	0xf,	0x1f,	0x0,	0x0,	0x0,	0x0,	0x0, // row 8, col 16
	0xff,	0xff,	0xff,	0x1f,	0x1f,	0x1f,	0xf,	0x1f, // row 8, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 8, col 18
	0x80,	0x80,	0xc0,	0xc0,	0xc0,	0xc0,	0xc0,	0xe0, // row 8, col 19
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 8, col 20
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x80, // row 9, col 1
	0x3,	0x3,	0x3,	0x3,	0x3,	0x1,	0x1,	0x1, // row 9, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 3
	0xf0,	0xf0,	0xf0,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 4
	0x0,	0x0,	0x0,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 5
	0x0,	0x0,	0x0,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 6
	0x7,	0xf,	0x7,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 8
	0xff,	0xfe,	0xfc,	0xfc,	0xf8,	0xf0,	0xf0,	0xe0, // row 9, col 9
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 9, col 10
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 9, col 11
	0xff,	0x7f,	0x3f,	0x3f,	0x1f,	0xf,	0xf,	0x7, // row 9, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 13
	0xe0,	0xe0,	0xe0,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 14
	0x0,	0x0,	0x0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0, // row 9, col 15
	0x0,	0x0,	0x0,	0xf,	0x1f,	0x1f,	0xf,	0x1f, // row 9, col 16
	0x1f,	0xf,	0x1f,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 9, col 18
	0xc0,	0xc0,	0xc0,	0xc0,	0xc0,	0x80,	0x80,	0x80, // row 9, col 19
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x1, // row 9, col 20
	0x80,	0x80,	0xc0,	0xc0,	0xc0,	0xc0,	0xe0,	0xf0, // row 10, col 1
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 10, col 2
	0xff,	0xff,	0x7f,	0x7f,	0x3f,	0x1f,	0xf,	0xf, // row 10, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 10, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 10, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 10, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 10, col 7
	0xff,	0xff,	0xff,	0xff,	0xfe,	0xfc,	0xf8,	0xf0, // row 10, col 8
	0xc0,	0x80,	0x80,	0x0,	0x0,	0x0,	0x0,	0x0, // row 10, col 9
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x1,	0x3, // row 10, col 10
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x80,	0xc0, // row 10, col 11
	0x3,	0x1,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0, // row 10, col 12
	0xff,	0xff,	0xff,	0xff,	0x7f,	0x3f,	0x1f,	0xf, // row 10, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 10, col 14
	0xe0,	0xe0,	0xe0,	0xff,	0xff,	0xff,	0xff,	0xff, // row 10, col 15
	0x1f,	0xf,	0x1f,	0xff,	0xff,	0xff,	0xff,	0xff, // row 10, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 10, col 17
	0xff,	0xff,	0xfe,	0xfe,	0xfc,	0xf8,	0xf8,	0xf0, // row 10, col 18
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 10, col 19
	0x1,	0x1,	0x3,	0x3,	0x3,	0x7,	0x7,	0x7, // row 10, col 20
	0xf0,	0xf0,	0xf8,	0xfc,	0xfc,	0xfe,	0xff,	0xff, // row 11, col 1
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 11, col 2
	0x7,	0x3,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 11, col 3
	0xff,	0xff,	0xff,	0x7f,	0x1f,	0x7,	0x0,	0x0, // row 11, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0x17, // row 11, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xfe,	0xa0, // row 11, col 6
	0xff,	0xff,	0xff,	0xfc,	0xf8,	0xc0,	0x0,	0x0, // row 11, col 7
	0xe0,	0x80,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 11, col 8
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 11, col 9
	0x3,	0x7,	0xf,	0x1f,	0x1f,	0x3f,	0x7f,	0xff, // row 11, col 10
	0xc0,	0xe0,	0xf0,	0xf8,	0xf8,	0xfc,	0xfe,	0xff, // row 11, col 11
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 11, col 12
	0x7,	0x1,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 11, col 13
	0xff,	0xff,	0xff,	0x3f,	0x1f,	0x3,	0x1,	0x0, // row 11, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0x7f,	0xb, // row 11, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xd0, // row 11, col 16
	0xff,	0xff,	0xff,	0xfe,	0xf8,	0xe0,	0x80,	0x0, // row 11, col 17
	0xe0,	0xc0,	0x80,	0x0,	0x0,	0x0,	0x0,	0x0, // row 11, col 18
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x1, // row 11, col 19
	0xf,	0xf,	0x1f,	0x3f,	0x3f,	0x7f,	0xff,	0xff, // row 11, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 12, col 1
	0xc0,	0xc0,	0xe0,	0xf0,	0xfc,	0xfe,	0xff,	0xff, // row 12, col 2
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0xc0, // row 12, col 3
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 12, col 4
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 12, col 5
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 12, col 6
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 12, col 7
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x1,	0x3, // row 12, col 8
	0x1,	0x3,	0x7,	0x1f,	0x3f,	0x7f,	0xff,	0xff, // row 12, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 12, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 12, col 11
	0x80,	0xc0,	0xe0,	0xf8,	0xfc,	0xfe,	0xff,	0xff, // row 12, col 12
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x80,	0xc0, // row 12, col 13
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 12, col 14
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 12, col 15
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 12, col 16
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0, // row 12, col 17
	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x0,	0x3, // row 12, col 18
	0x1,	0x3,	0x7,	0xf,	0x3f,	0x7f,	0xff,	0xff, // row 12, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 12, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 2
	0xe0,	0xf8,	0xfe,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 3
	0x0,	0x0,	0x0,	0xc0,	0xfd,	0xff,	0xff,	0xff, // row 13, col 4
	0x0,	0x0,	0x0,	0x0,	0x0,	0xf5,	0xff,	0xff, // row 13, col 5
	0x0,	0x0,	0x0,	0x0,	0x0,	0x5f,	0xff,	0xff, // row 13, col 6
	0x0,	0x0,	0x0,	0x7,	0x7f,	0xff,	0xff,	0xff, // row 13, col 7
	0xf,	0x3f,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 12
	0xf0,	0xfc,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 13
	0x0,	0x0,	0x0,	0xe0,	0xfe,	0xff,	0xff,	0xff, // row 13, col 14
	0x0,	0x0,	0x0,	0x0,	0x80,	0xfd,	0xff,	0xff, // row 13, col 15
	0x0,	0x0,	0x0,	0x0,	0x0,	0x5f,	0xff,	0xff, // row 13, col 16
	0x0,	0x0,	0x0,	0x3,	0x3f,	0xff,	0xff,	0xff, // row 13, col 17
	0x7,	0x1f,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 18
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 13, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 18
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 14, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 15, col 1
	0xe0,	0xe0,	0xc0,	0xc0,	0xc0,	0x80,	0x80,	0x80, // row 15, col 2
	0x7f,	0x3f,	0x3f,	0x1f,	0x1f,	0x1f,	0x1f,	0xf, // row 15, col 3
	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xe0, // row 15, col 4
	0x1,	0x0,	0x0,	0x0,	0x0,	0x38,	0x7e,	0x3e, // row 15, col 5
	0xff,	0x3f,	0x1f,	0xf,	0x7,	0x7,	0x7,	0x7, // row 15, col 6
	0xc0,	0x80,	0x80,	0x80,	0x80,	0x81,	0x81,	0x81, // row 15, col 7
	0xf,	0x1,	0x0,	0x0,	0x0,	0xc0,	0xf0,	0xf8, // row 15, col 8
	0xff,	0xfe,	0x7e,	0x3e,	0x3e,	0x1e,	0x1e,	0x1e, // row 15, col 9
	0x7,	0x7,	0x7,	0x7,	0x7,	0x7,	0x7,	0x7, // row 15, col 10
	0xf0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0, // row 15, col 11
	0x7c,	0x7c,	0x7c,	0x7c,	0x7c,	0x7f,	0x7f,	0x7f, // row 15, col 12
	0x0,	0x0,	0x0,	0x0,	0x0,	0xe0,	0xe0,	0xf0, // row 15, col 13
	0x1,	0x1,	0x1,	0x1,	0x1,	0x3f,	0x7f,	0x7f, // row 15, col 14
	0xf0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0, // row 15, col 15
	0x7f,	0x3f,	0x1f,	0x1f,	0xf,	0xf,	0x7,	0x7, // row 15, col 16
	0x87,	0x7,	0x3,	0x3,	0x7,	0x3,	0x3,	0x7, // row 15, col 17
	0xfe,	0xf8,	0xf0,	0xe0,	0xc0,	0xc0,	0x80,	0x81, // row 15, col 18
	0x3,	0x0,	0x0,	0x0,	0x0,	0xf0,	0xf8,	0xf8, // row 15, col 19
	0xff,	0xff,	0x3f,	0x3f,	0x1f,	0x1f,	0xf,	0x1f, // row 15, col 20
	0xff,	0xff,	0xff,	0xff,	0xfe,	0xfe,	0xfe,	0xfc, // row 16, col 1
	0x4,	0x2,	0x6,	0x6,	0xe,	0x7,	0x0,	0x0, // row 16, col 2
	0xf,	0xf,	0x7,	0x7,	0x7,	0x3,	0x3,	0x3, // row 16, col 3
	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xe0, // row 16, col 4
	0x3e,	0x7e,	0x3c,	0x0,	0x0,	0x0,	0x0,	0x0, // row 16, col 5
	0x7,	0x7,	0x7,	0x7,	0xf,	0x1f,	0x3f,	0x3f, // row 16, col 6
	0x81,	0x81,	0x81,	0x81,	0x81,	0x81,	0x81,	0x81, // row 16, col 7
	0xf8,	0xfc,	0xfc,	0xfc,	0xfc,	0xfc,	0xfc,	0xf8, // row 16, col 8
	0xe,	0xe,	0xe,	0xe,	0xe,	0xe,	0xe,	0xe, // row 16, col 9
	0x7,	0x7,	0x7,	0x7,	0x7,	0x7,	0x7,	0x7, // row 16, col 10
	0xe0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0, // row 16, col 11
	0x7f,	0x7f,	0x7f,	0x7f,	0x7f,	0x7f,	0x7f,	0x7f, // row 16, col 12
	0xe0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0, // row 16, col 13
	0x7f,	0x7f,	0x7f,	0x7f,	0x7f,	0x7f,	0x7f,	0x7f, // row 16, col 14
	0xe0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0, // row 16, col 15
	0x3,	0x3,	0x1,	0x41,	0x40,	0x60,	0x60,	0x70, // row 16, col 16
	0x3,	0x3,	0x7,	0x3,	0x3,	0x7,	0x3,	0x3, // row 16, col 17
	0x81,	0x81,	0x81,	0x81,	0x81,	0x81,	0x81,	0x81, // row 16, col 18
	0xfc,	0xfc,	0xfc,	0xfc,	0xfc,	0xfc,	0xfc,	0xfc, // row 16, col 19
	0xf,	0xf,	0xf,	0xf,	0xf,	0xf,	0xf,	0xf, // row 16, col 20
	0xfc,	0xfc,	0xf8,	0xf8,	0xf8,	0xf8,	0xf0,	0xff, // row 17, col 1
	0x0,	0x0,	0x0,	0x1f,	0x1f,	0x3f,	0x3f,	0xff, // row 17, col 2
	0x1,	0x1,	0x1,	0x81,	0xc0,	0xc0,	0xc0,	0xff, // row 17, col 3
	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xe0,	0xf0,	0xff, // row 17, col 4
	0x30,	0x78,	0x38,	0x38,	0x7c,	0x3c,	0x7e,	0xff, // row 17, col 5
	0x1f,	0x1f,	0xf,	0xf,	0x7,	0x7,	0x3,	0xff, // row 17, col 6
	0x81,	0x81,	0x80,	0x80,	0x80,	0x80,	0xc0,	0xff, // row 17, col 7
	0xf8,	0xf0,	0x0,	0x0,	0x0,	0x0,	0x7,	0xff, // row 17, col 8
	0x1e,	0x1f,	0x3f,	0x3f,	0x7f,	0xff,	0xff,	0xff, // row 17, col 9
	0x3,	0x3,	0x0,	0x0,	0x80,	0xc0,	0xf0,	0xff, // row 17, col 10
	0xe0,	0xe0,	0x80,	0x0,	0x0,	0x1,	0x7,	0xff, // row 17, col 11
	0x7f,	0x7f,	0x7c,	0xfc,	0xfc,	0xfc,	0xfc,	0xff, // row 17, col 12
	0xe0,	0xf0,	0x0,	0x0,	0x0,	0x0,	0x0,	0xff, // row 17, col 13
	0x7f,	0x7f,	0x1,	0x1,	0x1,	0x1,	0x1,	0xff, // row 17, col 14
	0xe0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0,	0xe0,	0xff, // row 17, col 15
	0x70,	0x78,	0x78,	0x7c,	0x7c,	0x7e,	0x7e,	0xff, // row 17, col 16
	0x7,	0x3,	0x3,	0x7,	0x3,	0x3,	0x7,	0xff, // row 17, col 17
	0x81,	0x80,	0xc0,	0xe0,	0xe0,	0xf0,	0xfc,	0xff, // row 17, col 18
	0xf8,	0xf8,	0x20,	0x0,	0x0,	0x0,	0x1,	0xff, // row 17, col 19
	0x1f,	0x1f,	0x1f,	0x3f,	0x3f,	0x7f,	0xff,	0xff, // row 17, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 18
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 18, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 18
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 19, col 20
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 1
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 2
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 3
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 4
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 5
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 6
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 7
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 8
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 9
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 10
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 11
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 12
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 13
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 14
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 15
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 16
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 17
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 18
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 19
	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff,	0xff, // row 20, col 20
};

#endif

